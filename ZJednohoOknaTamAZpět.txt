MainWindow.xaml

<Window x:Class="WpfApp1.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApp1"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Button Content="Button" 
                HorizontalAlignment="Center" 
                Click="Button_Click"
                VerticalAlignment="Center"/>
        <Label Content="{Binding Name}" 
               HorizontalAlignment="Center" 
               HorizontalContentAlignment="Center"
               VerticalContentAlignment="Center"
               VerticalAlignment="Top"
               Height="136" 
               Width="256"
               FontSize="40" Margin="0,34,0,0"/>

    </Grid>
</Window>


MainWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WpfApp1
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        Student vojta { get; set; }
        public MainWindow()
        {
            vojta = new("Vojtěch", 12);
            InitializeComponent();
            DataContext = vojta;
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            Druhe okno = new Druhe(vojta);
            okno.ShowDialog();

        }
    }
}


Druhe.xaml

<Window x:Class="WpfApp1.Druhe"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApp1"
        mc:Ignorable="d"
        Title="Druhe" Height="450" Width="800">
    <Grid>
        <Label Content="{Binding Name}" 
               HorizontalAlignment="Center" 
               HorizontalContentAlignment="Center"
               VerticalContentAlignment="Center"
               VerticalAlignment="Center"
               Height="136" 
               Width="256"
               FontSize="40"/>

    </Grid>
</Window>


Druhe.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace WpfApp1
{
    /// <summary>
    /// Interakční logika pro Druhe.xaml
    /// </summary>
    public partial class Druhe : Window
    {
        public Student Student { get; set; }
        public Druhe(Student student)
        {
            Student = student;
            InitializeComponent();
            DataContext = Student;
            Closing += (s, e) => zmenaJmena("SpongeBob");
        }
        void zmenaJmena(string jmeno)
        {
            Student.Name = jmeno;
        }
    }
}


Student.cs

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WpfApp1
{
     public class Student : INotifyPropertyChanged
    {
        public Student(string name, int age)
        {
            Name = name;
            Age = age;
        }
        public string Name {
            get => name;
            set
            {
                if (name != value)
                {
                    name = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));
                }
            }
        }
        private string name;
        public int Age { get; set; }

        public event PropertyChangedEventHandler? PropertyChanged;
    }
}

